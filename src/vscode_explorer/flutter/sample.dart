// Auto-Generated File

// This file is auto-generated by a VSCode extension.

// - [Install Extension](https://marketplace.visualstudio.com/items?itemName=jackFan.lazy-jack)

// - [Read More](https://github.com/jack-fan1991/lazy-jack-flutter-extension/blob/HEAD/doc/clean_architecture.md)

import 'package:flutter/material.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:owlpay_cash/core/presentation/biometric/biometric_passcode_verify_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/security/reset_passcode/01_passcode_verify_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/security/reset_passcode/02_set_passcode_page_screen.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/security/reset_passcode/04_reset_passcode_completed_screen.dart';
import 'package:owlpay_cash/features/transaction/data/models/history.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/sign_up/email_already_register_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/sign_up/sign_up_user_infoi_page.dart';
import 'package:owlpay_cash/pages/delete_account/delete_account_page.dart';
import 'package:owlpay_cash/pages/delete_account/presentation/widgets/delete_account_form_page.dart';
import 'package:owlpay_cash/pages/deposit/deposit_page.dart';
import 'package:owlpay_cash/pages/history_detail/presentation/bloc/history_detail_cubit.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/security/forgot_passcode_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/security_setup/03_setup_security_questions_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/login/login_page.dart';
import 'package:owlpay_cash/features/recipient/presentation/pages/recipient_create_country_select/recipient_create_country_select_page.dart';
import 'package:owlpay_cash/features/shared/recipient_form/presentation/pages/recipient_form_create/recipient_create_form_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/about_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/account_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/link_account/ach_account_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/security/change_password_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/contact_us_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/security/security_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/sign_up/bloc/sign_up_form_cubit.dart';
import 'package:owlpay_cash/pages/supported_regions/supported_regions_page.dart';
import 'package:owlpay_cash/features/welcome/welcome_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/sign_up/sign_up_page.dart';
import 'package:owlpay_cash/features/home/home_page.dart';
import 'package:owlpay_cash/features/home_cash_page/cash_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/forgot_password_page.dart';
import 'package:owlpay_cash/pages/ach/ach_page.dart';
import 'package:owlpay_cash/pages/wire/wire_page.dart';
import 'package:owlpay_cash/pages/wire_bank_info/wire_bank_info_page.dart';
import 'package:owlpay_cash/pages/history/history_page.dart';
import 'package:owlpay_cash/pages/history_detail/history_detail_page.dart';
import 'package:owlpay_cash/features/tink/tink_callback_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/security_setup/01_setup_passcode_page.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/security_setup/02_confirm_passcode_page.dart';
import 'package:owlpay_cash/widgets/screen/full_screen.dart';
import 'package:owlpay_cash/features/onboard/presentation/pages/security_setup/04_passcode_completed_screen.dart';
import 'package:owlpay_cash/features/home_recipients/recipients_page.dart';
import 'package:owlpay_cash/features/home_setting/presentation/pages/security/face_id/face_id_completed_page.dart';
import 'package:owlpay_cash/features/recipient/presentation/pages/recipient_account_details/recipients_account_details_page.dart';
import 'package:owlpay_cash/pages/kyc_start/kyc_start_page.dart';
import 'package:owlpay_cash/features/recipient/presentation/pages/recipient_send/recipients_send_page.dart';
import 'package:owlpay_cash/features/shared/recipient_form/presentation/pages/recipient_form_edit/recipient_edit_form_page.dart';
import 'package:owlpay_cash/pages/ban_screen.dart';
import 'package:owlpay_cash/pages/deposit_send/deposit_send_page.dart';
import 'package:owlpay_cash/pages/deposit_send/deposit_review_screen.dart';
import 'package:owlpay_cash/pages/deposit_send/deposit_success_screen.dart';

import 'package:owlpay_cash/features/shared/recipient_form/presentation/pages/recipient_send_form/recipient_send_form_page.dart';

import 'package:owlpay_cash/features/home_recipients/send_again_screen.dart';

import 'package:owlpay_cash/features/tink/tink_screen.dart';

import 'package:owlpay_cash/features/recipient/presentation/pages/recipient_send_review/recipients_send_review_page.dart';

import 'package:owlpay_cash/features/recipient/presentation/pages/recipient_send_review/visa_branding_screen.dart';

import 'package:owlpay_cash/features/recipient/presentation/pages/recipient_send_review/send_success_screen.dart';

import 'package:owlpay_cash/features/onboard/presentation/pages/email_verification/email_verification_screen.dart';

import 'package:owlpay_cash/pages/history_detail/cancel_review_screen.dart';

import 'package:owlpay_cash/pages/history_detail/cancel_success_screen.dart';

import 'package:owlpay_cash/features/home_setting/presentation/pages/notification_preferences_page.dart';

import 'package:owlpay_cash/features/web_view/web_view_screen.dart';

import 'package:owlpay_cash/features/shared/recipient_form/presentation/pages/widgets/page_recipient_form_tab.dart';

import 'package:owlpay_cash/features/home_setting/presentation/pages/security/face_id/face_id_passcode_enter_page.dart';

import 'package:owlpay_cash/features/home_setting/presentation/pages/security/reset_passcode/03_confirm_passcode_screen.dart';

import 'package:owlpay_cash/features/testt/presentation/pages/testt_page.dart';

// ===== WARNING =====

// Avoid modifying this section to prevent formatting issues.

// ===== WARNING =====

const String ROUTE_WELCOME = WelcomePageWidget.routeName;
const String ROUTE_LOGIN = LoginPageWidget.routeName;
const String ROUTE_SIGN_UP_EMAIL = SignUpEmailPageWidget.routeName;
const String ROUTE_REGISTER_USER_INFO = SignUpUserInfoPageWidget.routeName;
const String ROUTE_EMAIL_ALREADY_REGISTERED =
    EmailAlreadyRegisteredPageWidget.routeName;
const String ROUTE_HOME = HomePageWidget.routeName;
const String ROUTE_CASH_PAGE = CashPageWidget.routeName;
const String ROUTE_FORGOT_PASSWORD = ForgotPasswordPageWidget.routeName;
const String ROUTE_DEPOSIT = DepositPageWidget.routeName;
const String ROUTE_ACH = AchPageWidget.routeName;
const String ROUTE_WIRE = WirePageWidget.routeName;
const String ROUTE_WIRE_BANK_INFO = WireBankInfoPageWidget.routeName;
const String ROUTE_HISTORY = HistoryPageWidget.routeName;
const String ROUTE_HISTORY_DETAIL = HistoryDetailPageWidget.routeName;
const String ROUTE_TINK_CALLBACK = TinkCallbackPageWidget.routeName;
const String ROUTE_ON_BOARD_ENTER_PASSCODE =
    OnBoardVerifyPasscodePageWidget.routeName;
const String ROUTE_ON_BOARD_CONFIRM_PASSCODE =
    OnBoardConfirmPasscodePageWidget.routeName;
const String ROUTE_RESET_PASSCODE_ENTER_PAGE =
    ResetPasscodeVerifyScreenPageWidget.routeName;
const String ROUTE_RESET_PASSCODE_SET_PASSCODE_PAGE =
    ResetPasscodeSetPasscodePagePageWidget.routeName;
const String ROUTE_RESET_PASSCODE_CONFIRM_PASSCODE =
    ResetPasscodeConfirmPasscodePageWidget.routeName;
const String ROUTE_TESTT = TesttPage.routeName;

// ===== WARNING =====

// Avoid modifying this section to prevent formatting issues.

// ===== WARNING =====

const String ROUTE_FACEID_PASSCODE_ENTER =
    FaceidPasscodeEnterPageWidget.routeName;

const String ROUTE_ON_BOARD_PASSCODE_COMPLETED_SCREEN =
    OnboardPasscodeCompletedScreenWidget.routeName;

const String ROUTE_FULL_SCREEN = FullScreenPageWidget.routeName;
const String ROUTE_RECIPIENTS = RecipientsPageWidget.routeName;
const String ROUTE_RECIPIENT_CREATE_FORM =
    RecipientCreateFormPageWidget.routeName;
const String ROUTE_RECIPIENT_CREATE_COUNTRY_SELECT =
    RecipientCreateCountrySelectPageWidget.routeName;
const String ROUTE_RECIPIENTS_ACCOUNT_DETAILS =
    RecipientsAccountDetailsPageWidget.routeName;
const String ROUTE_RECIPIENTS_SEND = RecipientsSendPageWidget.routeName;
const String ROUTE_KYC_START = KycStartPageWidget.routeName;
const String ROUTE_RECIPIENT_EDIT_FORM = RecipientEditFormPageWidget.routeName;
const String ROUTE_BAN = BanPageWidget.routeName;
const String ROUTE_DEPOSIT_SEND = DepositSendPageWidget.routeName;
const String ROUTE_RECIPIENT_SEND_FORM = RecipientSendFormPageWidget.routeName;
const String ROUTE_DEPOSIT_REVIEW = DepositReviewPageWidget.routeName;
const String ROUTE_DEPOSIT_SUCCESS_SCREEN =
    DepositSuccessScreenPageWidget.routeName;
const String ROUTE_ACCOUNT = AccountPageWidget.routeName;
const String ROUTE_CHANGE_PASSWORD = ChangePasswordPageWidget.routeName;
const String ROUTE_FACE_ID_COMPLETED_PAGE = FaceIdCompletedPageWidget.routeName;
const String ROUTE_ABOUT = AboutPageWidget.routeName;
const String ROUTE_CONTACT_US = ContactUsPageWidget.routeName;
const String ROUTE_SECURITY = SecurityPageWidget.routeName;
const String ROUTE_DELETE_ACCOUNT = DeleteAccountPageWidget.routeName;
const String ROUTE_DELETE_ACCOUNT_FORM = DeleteAccountFormPageWidget.routeName;
const String ROUTE_FORGOT_PASSCODE = ForgotPasscodePageWidget.routeName;
const String ROUTE_ACH_ACCOUNT = AchAccountPageWidget.routeName;
const String ROUTE_SEND_AGAIN = SendAgainPageWidget.routeName;
const String ROUTE_TINK = TinkPageWidget.routeName;
const String ROUTE_ON_BOARD_SET_SECURITY_QUESTIONS =
    OnBoardSetupSecurityQuestionsPage.routeName;
const String ROUTE_RECIPIENTS_SEND_REVIEW =
    RecipientsSendReviewPageWidget.routeName;
const String ROUTE_VISA_BRANDING = VisaBrandingPageWidget.routeName;
const String ROUTE_SEND_SUCCESS = SendSuccessPageWidget.routeName;
const String ROUTE_EMAIL_VERIFICATION = EmailVerificationScreenWidget.routeName;
const String ROUTE_CANCEL_REVIEW = CancelReviewPageWidget.routeName;
const String ROUTE_CANCEL_SUCCESS = CancelSuccessPageWidget.routeName;
const String ROUTE_SUPPORTED_REGIONS = SupportedRegionsPageWidget.routeName;
const String ROUTE_NOTIFICATION_PREFERENCES =
    NotificationPreferencesPageWidget.routeName;
const String ROUTE_WEB_VIEW = WebViewScreenWidget.routeName;
const String ROUTE_PAGE_RECIPIENT_FORM_WIDGET =
    PageRecipientFormTabWidget.routeName;
const String ROUTE_BIOMETRIC_PASSCODE_VERIFY_PAGE =
    BiometricPasscodeVerifyPageWidget.routeName;
const String ROUTE_RESET_PASSCODE_COMPLETED =
    ResetPasscodeCompletedScreenWidget.routeName;

class RouteConfiguration {
  /// ```dart
  /// import 'package:flutter/material.dart';
  /// import 'route_configuration2.dart';

  /// void main() {
  ///   runApp(MyApp());
  /// }

  /// class MyApp extends StatelessWidget {
  ///   @override
  ///   Widget build(BuildContext context) {
  ///     return MaterialApp(
  ///       title: 'My App',
  ///       initialRoute: ROUTE_HOME,
  ///       onGenerateRoute: RouteConfiguration.onGenerateRoute,
  ///     );
  ///   }
  /// }
  ///```
  static Route<dynamic> generateRoute(RouteSettings settings) {
    switch (settings.name) {
      case ROUTE_WELCOME:
        return CupertinoPageRoute(
          builder: (context) => WelcomePageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_REGISTER_USER_INFO:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;
        final bloc = args['bloc'] as SignUpFormCubit;
        return CupertinoPageRoute(
          builder:
              (_) => BlocProvider.value(
                value: bloc,
                child: SignUpUserInfoPageWidget(signUpCubit: bloc),
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_LOGIN:
        return CupertinoPageRoute(
          builder: (context) => LoginPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_SIGN_UP_EMAIL:
        return CupertinoPageRoute(
          builder: (context) => SignUpEmailPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_EMAIL_ALREADY_REGISTERED:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;
        return CupertinoPageRoute(
          builder:
              (context) => EmailAlreadyRegisteredPageWidget(
                name: args['name'] ?? "",
                email: args['email'] ?? "",
                suggestion: args['suggestion'],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_HOME:
        return CupertinoPageRoute(
          builder: (context) => HomePageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_FORGOT_PASSWORD:
        return CupertinoPageRoute(
          builder: (context) => ForgotPasswordPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_DEPOSIT:
        return CupertinoPageRoute(
          builder: (context) => DepositPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_ACH:
        return CupertinoPageRoute(
          builder: (context) => AchPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_WIRE:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        final isShowContinue = args['isShowButton'] ?? true;

        return CupertinoPageRoute(
          builder: (context) => WirePageWidget(isShowContinue: isShowContinue),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_WIRE_BANK_INFO:
        return CupertinoPageRoute(
          builder: (context) => WireBankInfoPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_HISTORY:
        return CupertinoPageRoute(
          builder: (context) => HistoryPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_HISTORY_DETAIL:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        late HistoryType history;

        try {
          history = HistoryType.values.byName(args['type']);
        } catch (_) {
          history = args['type'] as HistoryType;
        }
        final uuid = args['uuid'] as String;
        final tab = args['tab'] as String?;

        return CupertinoPageRoute(
          builder:
              (context) => HistoryDetailPageWidget(
                historyType: history,
                uuid: uuid,
                tab: tab ?? 'timeline',
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_TINK_CALLBACK:
        return CupertinoPageRoute(
          builder:
              (context) => TinkCallbackPageWidget(
                settings.arguments as Map<String, dynamic>,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_ON_BOARD_ENTER_PASSCODE:
        return CupertinoPageRoute(
          builder: (context) => OnBoardVerifyPasscodePageWidget(),
          settings: RouteSettings(name: settings.name),
        );
      case ROUTE_ON_BOARD_CONFIRM_PASSCODE:
        return CupertinoPageRoute(
          builder:
              (context) => OnBoardConfirmPasscodePageWidget(
                args: settings.arguments as RouteOnBoardConfirmPasscodePageArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_ON_BOARD_SET_SECURITY_QUESTIONS:
        return CupertinoPageRoute(
          builder:
              (context) => OnBoardSetupSecurityQuestionsPage(
                args:
                    settings.arguments
                        as RouteOnBoardSetupSecurityQuestionsPageArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_ON_BOARD_PASSCODE_COMPLETED_SCREEN:
        return CupertinoPageRoute(
          builder:
              (context) => OnboardPasscodeCompletedScreenWidget(
                args:
                    settings.arguments
                        as RouteOnboardPasscodeCompletedScreenArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_FULL_SCREEN:
        return CupertinoPageRoute(
          builder: (context) => FullScreenPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENTS:
        return CupertinoPageRoute(
          builder: (context) => RecipientsPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENT_CREATE_FORM:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        final countryCode = args['countryCode'] as String;

        return CupertinoPageRoute(
          builder: (context) => RecipientCreateFormPageWidget(countryCode),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENT_CREATE_COUNTRY_SELECT:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => RecipientCreateCountrySelectPageWidget(
                recipientData: args['recipientData'],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_ACCOUNT:
        return CupertinoPageRoute(
          builder: (context) => AccountPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_CHANGE_PASSWORD:
        return CupertinoPageRoute(
          builder: (context) => ChangePasswordPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_FACE_ID_COMPLETED_PAGE:
        return CupertinoPageRoute(
          builder: (context) => FaceIdCompletedPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_CONTACT_US:
        return CupertinoPageRoute(
          builder: (context) => ContactUsPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_ABOUT:
        return CupertinoPageRoute(
          builder: (context) => AboutPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_SECURITY:
        return CupertinoPageRoute(
          builder: (context) => SecurityPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENTS_ACCOUNT_DETAILS:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => RecipientsAccountDetailsPageWidget(
                recipientsAccountCubit: args['bloc'],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENTS_SEND:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => RecipientsSendPageWidget(
                recipientsBankDetailsCubit: args['bloc'],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_KYC_START:
        return CupertinoPageRoute(
          builder: (context) => KycStartPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_DELETE_ACCOUNT:
        return CupertinoPageRoute(
          builder: (context) => DeleteAccountPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_DELETE_ACCOUNT_FORM:
        return CupertinoPageRoute(
          builder: (context) => DeleteAccountFormPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENT_EDIT_FORM:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => RecipientEditFormPageWidget(
                recipientsBankDetailsCubit: args['bloc'],
                refreshRecipientAccountCubit: args['refreshBloc'],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_BAN:
        return CupertinoPageRoute(
          builder: (context) => BanPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_DEPOSIT_REVIEW:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder: (context) => DepositReviewPageWidget(cubit: args['bloc']),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_DEPOSIT_SUCCESS_SCREEN:
        return CupertinoPageRoute(
          builder: (context) => DepositSuccessScreenPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_FORGOT_PASSCODE:
        return CupertinoPageRoute(
          builder:
              (context) => ForgotPasscodePageWidget(
                args: settings.arguments as RouteForgotPasscodePageArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_ACH_ACCOUNT:
        return CupertinoPageRoute(
          builder: (context) => AchAccountPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_DEPOSIT_SEND:
        return CupertinoPageRoute(
          builder: (context) => DepositSendPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENT_SEND_FORM:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => RecipientSendFormPageWidget(
                recipientsSendCubit: args['recipientsSendCubit'],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_SEND_AGAIN:
        return CupertinoPageRoute(
          builder: (context) => SendAgainPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_TINK:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        final accountId = args['accountId'] as int?;

        return CupertinoPageRoute(
          builder: (context) => TinkPageWidget(accountId: accountId),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RECIPIENTS_SEND_REVIEW:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => RecipientsSendReviewPageWidget(
                recipientsSendCubit: args['recipientsSendCubit'],
                recipientSendFormCubit: args['formCubit'],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_VISA_BRANDING:
        return CupertinoPageRoute(
          builder: (context) => VisaBrandingPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_SEND_SUCCESS:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) =>
                  SendSuccessPageWidget(provider: args['provider'] ?? "VISA"),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_EMAIL_VERIFICATION:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => EmailVerificationScreenWidget(
                emailVerificationCubit: args["bloc"],
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_CANCEL_REVIEW:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => BlocProvider.value(
                value: args['bloc'] as HistoryDetailCubit,
                child: CancelReviewPageWidget(),
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_CANCEL_SUCCESS:
        Map<String, dynamic> args = settings.arguments as Map<String, dynamic>;

        return CupertinoPageRoute(
          builder:
              (context) => BlocProvider.value(
                value: args['bloc'] as HistoryDetailCubit, // ✅ 傳遞現有 bloc
                child: CancelSuccessPageWidget(),
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_SUPPORTED_REGIONS:
        return CupertinoPageRoute(
          builder: (context) => SupportedRegionsPageWidget(),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_NOTIFICATION_PREFERENCES:
        return CupertinoPageRoute(
          builder:
              (context) => NotificationPreferencesPageWidget(
                args: settings.arguments as RouteNotificationPreferencesArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_WEB_VIEW:
        return CupertinoPageRoute(
          builder:
              (context) => WebViewScreenWidget(
                args: settings.arguments as RouteWebViewArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_PAGE_RECIPIENT_FORM_WIDGET:
        return CupertinoPageRoute(
          builder:
              (context) => PageRecipientFormTabWidget(
                args: settings.arguments as PageRecipientFormTabArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_FACEID_PASSCODE_ENTER:
        return CupertinoPageRoute(
          builder:
              (context) => FaceidPasscodeEnterPageWidget(
                args: settings.arguments as RouteFaceidPasscodeEnterArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RESET_PASSCODE_ENTER_PAGE:
        return CupertinoPageRoute(
          builder:
              (context) => ResetPasscodeVerifyScreenPageWidget(
                args: settings.arguments as RouteResetPasscodeVerifyScreenArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RESET_PASSCODE_SET_PASSCODE_PAGE:
        return CupertinoPageRoute(
          builder:
              (context) => ResetPasscodeSetPasscodePagePageWidget(
                args:
                    settings.arguments as RouteResetPasscodeSetPasscodePageArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RESET_PASSCODE_CONFIRM_PASSCODE:
        return CupertinoPageRoute(
          builder:
              (context) => ResetPasscodeConfirmPasscodePageWidget(
                args:
                    settings.arguments as RouteResetPasscodeConfirmPasscodeArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );
      case ROUTE_BIOMETRIC_PASSCODE_VERIFY_PAGE:
        return CupertinoPageRoute(
          builder:
              (context) => BiometricPasscodeVerifyPageWidget(
                args:
                    settings.arguments as RouteBiometricPasscodeVerifyPageArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_RESET_PASSCODE_COMPLETED:
        return CupertinoPageRoute(
          builder:
              (context) => ResetPasscodeCompletedScreenWidget(
                args:
                    settings.arguments as RouteResetPasscodeCompletedScreenArgs,
              ),
          settings: RouteSettings(name: settings.name),
        );

      case ROUTE_TESTT:
        final args = settings.arguments;

        RouteTesttPageArgs parsedArgs;

        if (args is RouteTesttPageArgs) {
          parsedArgs = args;
        } else if (args is Map<String, dynamic>) {
          parsedArgs = RouteTesttPageArgs.fromMap(args);
        } else {
          parsedArgs = const RouteTesttPageArgs();
        }

        return CupertinoPageRoute(
          builder: (context) => TesttPage(args: parsedArgs),
          settings: RouteSettings(name: settings.name),
        );

      default:
        return CupertinoPageRoute(
          builder:
              (context) =>
                  Scaffold(body: Center(child: Text('No route defined for '))),
          settings: RouteSettings(name: settings.name),
        );
    }
  }
}
